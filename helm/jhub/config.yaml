proxy:
  secretToken: "8fcb4ad5a842c1eb2fca8c97d0dcc3ca59b7720ca1e1ad10a4717c532c2ffc4f"
  service:
    # Set type to NodePort to avoid trying to create a loadbalancer
    type: "NodePort"
    nodePorts:
      http: 30080
      https: 30443
auth:
  type: github
  github:
    clientId: "c975990b19a0ee7014de"
    clientSecret: "6b8487be7449731be31ed396381859a33c67ac5e"
    callbackUrl: "https://jhub-pilot.metagrid.xyz/hub/oauth_callback"
  whitelist:
    users:
      # - username
      # add user whitelist here #
#
#auth:
#  type: ldap
#  ldap:
#    server:
#      address: authorise.is.ed.ac.uk
#      ssl: true
#      port: 636
#    dn:
#      user:
         validRegex: ^[A-Za-z0-9_-]*$
#      templates:
#        - 'uid={username},ou=people,ou=central,dc=authorise,dc=ed,dc=ac,dc=uk'
#
# If we're using a separate db instead of a persistent volume + sqlite then we want something like this
#hub:
#  db:
#    type: "postgres"
#    url: "postgres+psycopg2://jhub:2jguehzj6b@192.168.1.12:5432/jhub"
debug:
  enabled: true
hub:
  extraConfig: |
    from kubespawner.spawner import KubeSpawner
    from traitlets import observe
    class MySpawner(KubeSpawner):
      @observe('user_options')
      def _update_options(self, change):
        options = change.new
        if 'image' in options:
          self.singleuser_image_spec = options['image']
        if 'mem' in options:
          self.mem_guarantee = options['mem']
          self.mem_limit = options['mem']
        if 'cpu' in options:
          self.cpu_guarantee = options['cpu']
          self.cpu_limit = options['cpu']
      def options_from_form(self, formdata):
        images = {
          0: "jupyter/base-notebook",
          1: "jupyter/datascience-notebook",
          2: "192.168.140.29:5000/ztf-notebook:0.0.3",
        }
        mems = {
          0: "256M",
          1: "1G",
          2: "8G",
          3: "24G"
        }
        cpus = {
          0: 0.25,
          1: 1.0,
          2: 4.0,
          3: 12.0
        }
        options = {}
        img = 0
        size = 0
        try:
          img = int(formdata.get('image', [''])[0])
        except ValueError:
          pass
        options['image'] = images.get(img, images[0])
        try:
          size = int(formdata.get('size', [''])[0])
        except ValueError:
          pass
        options['mem'] = mems.get(size, mems[1])
        options['cpu'] = cpus.get(size, cpus[1])
        return options
    c.JupyterHub.spawner_class = MySpawner
    c.Spawner.options_form = """<label for='image'>Image</label>&nbsp;&nbsp;
      <select name='image'>
        <option value='0'>Standard Notebook</option>
        <option value='1'>Data Science Notebook</option>
        <option value='2'>ZTF Notebook</option>
      </select>&nbsp;&nbsp;&nbsp;
      <label for='size'>Size</label>&nbsp;&nbsp;
      <select name='size'>
        <option value='0'>Tiny (256M / 0.25 CPU)</option>
        <option value='1' selected='selected'>Small (1G / 1 CPU)</option>
        <option value='2'>Large (8G / 4 CPU)</option>
        <option value='3'>X-Large (24G / 12 CPU)</option>
      </select>"""
